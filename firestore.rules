rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && request.auth.token.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasRestrictedChanges(restrictedFields) {
      return (resource == null && request.resource.data.keys().hasAny(restrictedFields)) ||
        (resource != null && request.resource.data.diff(resource.data).affectedKeys().hasAny(restrictedFields));
    }

    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS collection rules
    match /USERS/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow update: if isAdmin();
      allow create, delete: if false;
    }

    // COMPANY_SETTINGS collection rules
    match /COMPANY_SETTINGS/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // ATTENDANCE_RECORDS collection rules
    match /ATTENDANCE_RECORDS/{recordId} {
      allow read: if isAdmin();
      allow create: if false;
      allow update: if isAdmin() &&
        request.resource.data.userId == resource.data.userId &&
        !hasRestrictedChanges(['status', 'totalWorkingHours', 'check1_status', 'check2_status', 'check3_status']);
      allow delete: if false;
    }

    // LEAVE_REQUESTS collection rules
    match /LEAVE_REQUESTS/{requestId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();

      allow create: if isOwner(request.resource.data.userId) &&
        request.resource.data.keys().hasAll(['userId', 'leaveType', 'startDate', 'endDate', 'reason', 'status']) &&
        request.resource.data.status == 'pending';

      allow update: if isOwner(resource.data.userId) &&
        resource.data.status == 'pending' &&
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.status == 'cancelled' &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['status', 'cancelledAt', 'updatedAt']);

      allow update: if isAdmin() &&
        request.resource.data.userId == resource.data.userId &&
        !hasRestrictedChanges(['status', 'approvedBy', 'reviewedAt', 'reviewedBy', 'approvedAt']);
      allow delete: if false;
    }

    // PENALTIES collection rules
    match /PENALTIES/{penaltyId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if false;
      allow update: if isAdmin() &&
        request.resource.data.userId == resource.data.userId &&
        !hasRestrictedChanges(['amount', 'violationCount', 'status']);
      allow delete: if false;
    }

    // VIOLATION_HISTORY collection rules
    match /VIOLATION_HISTORY/{historyId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    // AUDIT_LOGS collection rules
    match /AUDIT_LOGS/{logId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    // NOTIFICATIONS collection rules
    match /NOTIFICATIONS/{notificationId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if false;
      allow update: if isOwner(resource.data.userId) &&
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']) &&
        request.resource.data.isRead is bool;
      allow delete: if false;
    }

    // LEAVE_ATTACHMENTS collection rules (storage uploads are signed; Firestore entries writable via backend only)
    match /LEAVE_ATTACHMENTS/{attachmentId} {
      allow read: if isAdmin() || isOwner(resource.data.userId);
      allow write: if false;
    }
  }
}
