rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS collection rules
    match /USERS/{userId} {
      // Users can read their own document
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Only admins can read/write any user document
      allow read, write: if request.auth != null && 
        request.auth.token.role == 'admin';
    }

    // COMPANY_SETTINGS collection rules
    match /COMPANY_SETTINGS/{document} {
      // Any authenticated user can read company settings
      allow read: if request.auth != null;
      
      // Only admins can write to company settings
      allow write: if request.auth != null && 
        request.auth.token.role == 'admin';
    }

    // ATTENDANCE_RECORDS collection rules
    match /ATTENDANCE_RECORDS/{recordId} {
      // Users can read their own attendance records
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Admins can read/write all attendance records
      allow read, write: if request.auth != null && 
        request.auth.token.role == 'admin';
      
      // Deny client-side writes to sensitive fields (Cloud Functions only)
      allow write: if request.auth != null && 
        request.auth.token.role == 'admin' &&
        // Prevent direct modification of calculated fields
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'totalWorkingHours']);
    }

    // LEAVE_REQUESTS collection rules
    match /LEAVE_REQUESTS/{requestId} {
      // Users can read their own leave requests
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Users can create their own leave requests
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        // Ensure only safe fields are set on creation
        request.resource.data.keys().hasAll(['userId', 'leaveType', 'startDate', 'endDate', 'reason']) &&
        request.resource.data.status == 'pending';
      
      // Users can update their own pending requests (only safe fields)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        resource.data.status == 'pending' &&
        // Only allow updates to safe fields, not status or admin fields
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'approvedBy', 'reviewedAt', 'approvedAt']);
      
      // Admins can read/write all leave requests
      allow read, write: if request.auth != null && 
        request.auth.token.role == 'admin';
    }

    // PENALTIES collection rules
    match /PENALTIES/{penaltyId} {
      // Users can read their own penalties
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Admins can read/write all penalties
      allow read, write: if request.auth != null && 
        request.auth.token.role == 'admin';
      
      // Deny all client-side writes to penalty amounts and status (Cloud Functions only)
      allow write: if request.auth != null && 
        request.auth.token.role == 'admin' &&
        // Prevent direct modification of penalty calculation fields
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['amount', 'violationCount', 'status']);
    }

    // VIOLATION_HISTORY collection rules
    match /VIOLATION_HISTORY/{historyId} {
      // Only admins can read violation history
      allow read: if request.auth != null && 
        request.auth.token.role == 'admin';
      
      // Deny all client-side writes (Cloud Functions only)
      allow write: if false;
    }

    // AUDIT_LOGS collection rules
    match /AUDIT_LOGS/{logId} {
      // Only admins can read audit logs
      allow read: if request.auth != null && 
        request.auth.token.role == 'admin';
      
      // Deny all client-side writes (Cloud Functions only)
      allow write: if false;
    }

    // NOTIFICATIONS collection rules
    match /NOTIFICATIONS/{notificationId} {
      // Users can read their own notifications
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Users can update read status of their own notifications
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        // Only allow updating isRead field
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      // Admins can read all notifications
      allow read: if request.auth != null && 
        request.auth.token.role == 'admin';
      
      // Deny all client-side writes to notification content (Cloud Functions only)
      allow write: if false;
    }
  }
}
